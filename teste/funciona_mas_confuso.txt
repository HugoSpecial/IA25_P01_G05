# main.py
from constraint import Problem
from itertools import product

# 1Ô∏è‚É£ Dados
dias = ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta"]
horas = [9, 11, 14, 16]
salas = ["Room A", "Room B", "Room C", "Room D"]
turmas = [1, 2]
ucs = list(range(1, 11))
professores = [1, 2, 3, 4, 5]

# Mapeamento simplificado
uc_to_turma = {
    1: 1, 2: 1, 3: 1, 4: 1, 5: 1,  # Turma 1: 5 UCs
    6: 2, 7: 2, 8: 2, 9: 2, 10: 2  # Turma 2: 5 UCs
}

uc_to_professor = {
    1: 1, 2: 2, 3: 3, 4: 4, 5: 5,
    6: 1, 7: 2, 8: 3, 9: 4, 10: 5
}

# Disponibilidades CORRIGIDAS - todos os professores com mais dias dispon√≠veis
disponibilidades = [
    # Professor 1 - dispon√≠vel em 4 dias
    {"prof_id": 1, "dia": "Segunda", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 1, "dia": "Ter√ßa", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 1, "dia": "Quarta", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 1, "dia": "Quinta", "hora_inicio": 8, "hora_fim": 18},
    # Professor 2 - dispon√≠vel em 4 dias
    {"prof_id": 2, "dia": "Segunda", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 2, "dia": "Ter√ßa", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 2, "dia": "Quarta", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 2, "dia": "Sexta", "hora_inicio": 8, "hora_fim": 18},
    # Professor 3 - dispon√≠vel em 4 dias
    {"prof_id": 3, "dia": "Segunda", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 3, "dia": "Ter√ßa", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 3, "dia": "Quarta", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 3, "dia": "Quinta", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 3, "dia": "Sexta", "hora_inicio": 8, "hora_fim": 18},
    # Professor 4 - dispon√≠vel em 4 dias
    {"prof_id": 4, "dia": "Segunda", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 4, "dia": "Quarta", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 4, "dia": "Quinta", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 4, "dia": "Sexta", "hora_inicio": 8, "hora_fim": 18},
    # Professor 5 - dispon√≠vel em 4 dias
    {"prof_id": 5, "dia": "Segunda", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 5, "dia": "Ter√ßa", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 5, "dia": "Quarta", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 5, "dia": "Quinta", "hora_inicio": 8, "hora_fim": 18},
    {"prof_id": 5, "dia": "Sexta", "hora_inicio": 8, "hora_fim": 18},
]

# 2Ô∏è‚É£ Fun√ß√£o para hor√°rios dispon√≠veis
def horarios_disponiveis(prof_id):
    disponiveis = []
    for d, h in product(dias, horas):
        for disp in disponibilidades:
            if (d == disp['dia'] and disp['prof_id'] == prof_id and 
                disp['hora_inicio'] <= h < disp['hora_fim']):
                disponiveis.append((d, h))
                break
    return disponiveis

# 3Ô∏è‚É£ Criar CSP
problem = Problem()

# 4Ô∏è‚É£ Adicionar vari√°veis - 2 aulas por UC (total 20 aulas = 10 por turma)
all_vars = []
for uc in ucs:
    turma = uc_to_turma[uc]
    professor = uc_to_professor[uc]
    
    domain_uc = []
    disponivel_prof = horarios_disponiveis(professor)
    
    for s in salas:
        for d, h in disponivel_prof:
            domain_uc.append((d, h, s, professor, turma, uc))
    
    if domain_uc:
        # Cada UC tem 2 aulas por semana
        problem.addVariable(f"UC{uc}_A1", domain_uc)
        problem.addVariable(f"UC{uc}_A2", domain_uc)
        all_vars.extend([f"UC{uc}_A1", f"UC{uc}_A2"])

# print(f"Total de vari√°veis: {len(all_vars)}")

# 5Ô∏è‚É£ Conflito de sala/hor√°rio (mais permissivo)
def no_same_room_same_time(a1, a2):
    # Apenas evitar mesma sala no mesmo hor√°rio
    return not (a1[0] == a2[0] and a1[1] == a2[1] and a1[2] == a2[2])

# Aplicar apenas para conflitos diretos
for i in range(len(all_vars)):
    for j in range(i + 1, len(all_vars)):
        problem.addConstraint(no_same_room_same_time, (all_vars[i], all_vars[j]))

# 6Ô∏è‚É£ M√°x. 3 aulas por turma por dia (mais flex√≠vel)
def max_three_per_day_turma(*aulas):
    count_por_dia_turma = {}
    for aula in aulas:
        dia, _, _, _, turma, _ = aula
        key = f"{turma}_{dia}"
        count_por_dia_turma[key] = count_por_dia_turma.get(key, 0) + 1
        if count_por_dia_turma[key] > 3:
            return False
    return True

# Aplicar separadamente por turma
for turma in turmas:
    vars_turma = [v for v in all_vars if f"_A" in v and any(v.startswith(f"UC{uc}_") and uc_to_turma[uc] == turma for uc in ucs)]
    if vars_turma:
        problem.addConstraint(max_three_per_day_turma, vars_turma)

# 7Ô∏è‚É£ Aulas da mesma UC em dias diferentes
def same_uc_different_days(a1, a2):
    uc1 = a1[5]
    uc2 = a2[5]
    if uc1 == uc2:
        return a1[0] != a2[0]  # Dias diferentes
    return True

for uc in ucs:
    problem.addConstraint(same_uc_different_days, (f"UC{uc}_A1", f"UC{uc}_A2"))

# 8Ô∏è‚É£ Garantir que cada UC tenha exatamente 2 aulas
def exactly_two_per_uc(*aulas):
    count_por_uc = {}
    for aula in aulas:
        _, _, _, _, _, uc = aula
        count_por_uc[uc] = count_por_uc.get(uc, 0) + 1
    
    # Verificar se cada UC tem exatamente 2 aulas
    for uc in ucs:
        if count_por_uc.get(uc, 0) != 2:
            return False
    return True

# Aplicar a restri√ß√£o global
problem.addConstraint(exactly_two_per_uc, all_vars)

# 9Ô∏è‚É£ GARANTIR QUE CADA TURMA TENHA EXATAMENTE 10 AULAS
def exactly_ten_per_turma(*aulas):
    count_por_turma = {}
    for aula in aulas:
        _, _, _, _, turma, _ = aula
        count_por_turma[turma] = count_por_turma.get(turma, 0) + 1
    
    # Verificar se cada turma tem exatamente 10 aulas
    for turma in turmas:
        if count_por_turma.get(turma, 0) != 10:
            return False
    return True

# Aplicar a restri√ß√£o global
problem.addConstraint(exactly_ten_per_turma, all_vars)

# üîü Tentar encontrar solu√ß√£o
print("A procurar solu√ß√µes...")

try:
    solucao = problem.getSolution()
    if solucao:
        print("‚úÖ Solu√ß√£o encontrada!")
        
        # Organizar e mostrar a solu√ß√£o
        aulas_por_turma = {1: 0, 2: 0}
        aulas_por_dia_turma = {}
        aulas_por_uc = {uc: 0 for uc in ucs}
        
        for turma in turmas:
            print(f"\nüìö Turma {turma}")
            tabela = {dia: {h: "" for h in horas} for dia in dias}
            
            for var, valores in solucao.items():
                dia, hora, sala, prof, t, uc = valores
                if t == turma:
                    aulas_por_turma[turma] += 1
                    key = (t, dia)
                    aulas_por_dia_turma[key] = aulas_por_dia_turma.get(key, 0) + 1
                    aulas_por_uc[uc] += 1
                    tabela[dia][hora] = f"UC{uc}(P{prof})"
            
            # Cabe√ßalho
            print(f"{'Hora':<6}", end="")
            for dia in dias:
                print(f"{dia:<15}", end="")
            print()
            
            # Hor√°rios
            for h in horas:
                print(f"{h:<6}", end="")
                for dia in dias:
                    print(f"{tabela[dia][h]:<15}", end="")
                print()
        
        # VERIFICA√á√ÉO EXPL√çCITA DAS 10 AULAS POR TURMA
        print(f"\nüéØ VERIFICA√á√ÉO DAS 10 AULAS POR TURMA:")
        for turma in turmas:
            total_aulas = aulas_por_turma[turma]
            status = "‚úÖ CUMPRIDO" if total_aulas == 10 else f"‚ùå FALHOU: {total_aulas} aulas em vez de 10"
            print(f"Turma {turma}: {total_aulas} aulas - {status}")
        
        # Verifica√ß√£o detalhada
        print(f"\nüìä VERIFICA√á√ÉO DETALHADA:")
        print(f"\nAULAS POR UC:")
        for uc in sorted(aulas_por_uc.keys()):
            count = aulas_por_uc[uc]
            status = "‚úì" if count == 2 else f"‚úó (deveria ser 2, mas √© {count})"
            print(f"  UC{uc}: {count} aulas {status}")
        
        print(f"\nAULAS POR DIA POR TURMA:")
        for turma in turmas:
            print(f"\nTurma {turma}:")
            for dia in dias:
                count = aulas_por_dia_turma.get((turma, dia), 0)
                status = "‚úì" if count <= 3 else "‚úó"
                print(f"  {dia}: {count} aulas {status}")
                
    else:
        print("‚ùå Nenhuma solu√ß√£o encontrada")
        
except Exception as e:
    print(f"‚ùå Erro: {e}")
    print("Tentando abordagem alternativa...")
    
    # Abordagem alternativa: gerar algumas solu√ß√µes poss√≠veis
    solucoes = problem.getSolutions()
    if solucoes:
        print(f"Encontradas {len(solucoes)} solu√ß√µes")
        solucao = solucoes[0]
        # Mostrar a primeira solu√ß√£o...
    else:
        print("Nenhuma solu√ß√£o encontrada com a abordagem alternativa")